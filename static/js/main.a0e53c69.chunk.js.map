{"version":3,"sources":["components/Header.jsx","components/Graph.jsx","components/Settings.jsx","components/Instructions.jsx","components/Output.jsx","useAppState.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","Graph","props","height","width","dispatch","useState","handleOne","x","y","handleTwo","draggingPointId","graphState","setGraphState","handleMouseDown","pointId","handleMouseUp","path","className","xmlns","viewBox","onMouseMove","event","clientX","clientY","svgRect","currentTarget","getBoundingClientRect","svgX","left","svgY","top","viewBoxX","viewBoxY","xPosition","clamp","yPosition","type","handleMouseMove","onMouseUp","onMouseLeave","fill","stroke","strokeWidth","x1","y1","x2","y2","cx","cy","r","onMouseDown","d","Settings","Instructions","Output","yeet","console","log","animation","animationTimingFunction","color","style","useAppState","useReducer","state","action","toFixed","Error","App","appState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0e53c69.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n  return (\n    <header>\n      Im the header!\n    </header>\n  )\n}\n\nexport default Header\n","import React, { useState, useEffect } from 'react'\nimport clamp from 'lodash.clamp'\n\nconst Graph = (props) => {\n  const {height, width, dispatch} = props\n  const initialState = {\n    handleOne: {\n      x: 50,\n      y: 150\n    },\n    handleTwo: {\n      x: 70,\n      y: 70\n    },\n    draggingPointId: null\n  }\n  const [ graphState, setGraphState ] = useState(initialState)\n  // useEffect(() => {\n  //   dispatch({\n  //     type: 'updatePositions',\n  //     positions: {\n  //       x1: graphState.handleOne.x,\n  //       y1: graphState.handleOne.y,\n  //       x2: graphState.handleTwo.x,\n  //       y2: graphState.handleTwo.y\n  //     }\n  //   })\n  // },[graphState.handleOne.x, graphState.handleOne.y, graphState.handleTwo.x, graphState.handleTwo.y])\n  const handleMouseDown = (pointId) => {\n    setGraphState({...graphState, draggingPointId: pointId})\n  }\n  const handleMouseUp = (pointId) => {\n    setGraphState({...graphState, draggingPointId: null})\n  }\n  const handleMouseMove = (event) => {\n    const { draggingPointId } = graphState\n    if(!draggingPointId) {return}\n    const {clientX, clientY} = event\n    const svgRect = event.currentTarget.getBoundingClientRect()\n    const svgX = clientX - svgRect.left\n    const svgY = clientY - svgRect.top\n    const viewBoxX = svgX * 150 / svgRect.width;\n    const viewBoxY = svgY * 300 / svgRect.height;\n    const xPosition = clamp(viewBoxX, 25, 125)\n    const yPosition = clamp(viewBoxY, 15, 285)\n    setGraphState({...graphState, [draggingPointId]: {x: xPosition, y: yPosition}})\n    dispatch({\n      type: draggingPointId,\n      x: xPosition,\n      y: yPosition\n    })\n  }\n  const path = `\n    M 25, 200\n    C ${graphState.handleOne.x},${graphState.handleOne.y}\n      ${graphState.handleTwo.x},${graphState.handleTwo.y}\n      125,100\n  `\n  return (\n    <svg className='graph'\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={width} height={height}\n      viewBox={`0 0 150 300`}\n      onMouseMove={event=>{handleMouseMove(event)}}\n      onMouseUp={handleMouseUp}\n      onMouseLeave={handleMouseUp}>\n      <rect x='25' y='100' height='100' width='100' fill='none' stroke='black' strokeWidth='5'/>\n      <line x1={graphState.handleOne.x} y1={graphState.handleOne.y} x2='25' y2='200' stroke='black' strokeWidth='5'/>\n      <line x1={graphState.handleTwo.x} y1={graphState.handleTwo.y} x2='125' y2='100' stroke='black' strokeWidth='5'/>\n      <circle cx='25' cy='200' r='5' fill='red'/>\n      <circle cx='125' cy='100' r='5' fill='red'/>\n      <circle className='handle' cx={graphState.handleOne.x} cy={graphState.handleOne.y} r='10' fill='hotpink' onMouseDown={()=>{handleMouseDown('handleOne')}}/>\n      <circle className='handle' cx={graphState.handleTwo.x} cy={graphState.handleTwo.y} r='10' fill='hotpink' onMouseDown={()=>{handleMouseDown('handleTwo')}}/>\n      <path stroke='red' fill='none'\n        d={path}\n      />\n    </svg>\n  )\n}\n\nexport default Graph\n","import React from 'react'\n\nconst Settings = () => {\n  return (\n    <div className='controls'>\n     settings\n    </div>\n  )\n}\n\nexport default Settings\n","import React from 'react'\n\nconst Instructions = (props) => {\n  const {handleOne, handleTwo} = props\n  const controlCoordinates = () => {\n    return (\n      <section>\n        {handleOne.x}  {handleOne.y}  {handleTwo.x}  {handleTwo.y} <br/>\n      </section>\n    )\n  }\n  return (\n    <div className='instructions'>\n      {controlCoordinates()}\n    </div>\n  )\n}\n\nexport default Instructions\n","import React, { useState, useEffect} from 'react'\n\nconst Output = props => {\n  const {handleOne, handleTwo} = props\n  let yeet = `cubic-bezier(${handleOne.x}, ${handleOne.y}, ${handleTwo.x}, ${handleTwo.y})`\n  console.log(yeet);\n  const animation = {\n    animationTimingFunction: `cubic-bezier(${handleOne.x}, ${handleOne.y}, ${handleTwo.x}, ${handleTwo.y})`,\n    // animationTimingFunction: 'linear',\n    color: 'yellow'\n  }\n  return (\n    <div className='output'>\n      <div\n        className='box'\n        style={animation}\n      >\n        bepis\n      </div>\n    </div>\n  )\n}\n\nexport default Output\n","import { useReducer } from 'react'\n\nfunction useAppState() {\n  const initialState = {\n    handleOne: {x: 0.5, y: 0.5},\n    handleTwo: {x: 0.5, y: 0.5}\n  }\n  function scalePositions(positions) {\n    return positions\n  }\n  function reducer(state, action) {\n    switch (action.type) {\n      case 'handleOne':\n        return {...state, [action.type]: {\n          x: ((action.x-25)/100).toFixed(2),\n          y: ((-(action.y-200))/100).toFixed(2)\n        }}\n      case 'handleTwo':\n        return {...state, [action.type]: {\n          x: ((action.x-25)/100).toFixed(2),\n          y: ((-(action.y-200))/100).toFixed(2)\n        }}\n      default:\n        console.log('wowee an error', action);\n        throw new Error()\n    }\n  }\n  const [state, dispatch] = useReducer(reducer, initialState)\n  return [state, dispatch]\n}\n\nexport default useAppState\n","import React from 'react';\nimport Header from './components/Header'\nimport Graph from './components/Graph'\nimport Settings from './components/Settings'\nimport Instructions from './components/Instructions'\nimport Output from './components/Output'\nimport useAppState from './useAppState'\n\nfunction App() {\n  const [appState, dispatch] = useAppState()\n  return (\n    <div className=\"App\">\n      <Header />\n      <Graph dispatch={dispatch} height='400' width='200'/>\n      <Settings dispatch={dispatch}/>\n      <Instructions {...appState}/>\n      <Output {...appState}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}